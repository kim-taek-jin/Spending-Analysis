<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>나의 지출 분석</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Noto Sans KR', sans-serif;
            background: linear-gradient(135deg, #a1c4fd 0%, #c2e9fb 100%);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }

        .container {
            max-width: 650px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        h1 {
            text-align: center;
            color: #444;
            margin-bottom: 10px;
            font-size: 2.5em;
            font-weight: 700;
        }

        .card {
            background: #ffffff;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.1);
        }

        h3 {
            font-size: 1.5em;
            font-weight: 700;
            margin-bottom: 20px;
            color: #555;
            border-left: 4px solid #4a90e2;
            padding-left: 10px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #666;
        }

        input, select {
            width: 100%;
            padding: 12px;
            border: 1px solid #e0e0e0;
            border-radius: 12px;
            font-size: 16px;
            transition: border-color 0.3s, box-shadow 0.3s;
            background: #f9f9f9;
        }

        input:focus, select:focus {
            outline: none;
            border-color: #4a90e2;
            box-shadow: 0 0 5px rgba(74, 144, 226, 0.2);
        }
        
        select {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            background: #f9f9f9 url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="%23666" class="bi bi-caret-down-fill" viewBox="0 0 16 16"><path d="M7.247 11.14c-.16.16-.408.16-.567 0L.19 5.924C.03 5.764-.002 5.626.03 5.484c.032-.142.14-.24.275-.275l7.152-.715c.135-.015.26.02.39.11l.035.035c.13.09.23.23.23.365z"/></svg>') no-repeat right 15px center;
            background-size: 12px;
        }

        .btn {
            background: linear-gradient(135deg, #4a90e2 0%, #764ba2 100%);
            color: white;
            padding: 14px 30px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 700;
            cursor: pointer;
            width: 100%;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(74, 144, 226, 0.3);
        }

        .total-section {
            background: linear-gradient(135deg, #4a90e2 0%, #764ba2 100%);
            color: white;
            padding: 25px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .total-amount {
            font-size: 2.2em;
            font-weight: 700;
            margin-top: 10px;
            letter-spacing: 1px;
        }

        .expense-item {
            background: #f9f9f9;
            padding: 18px;
            border-radius: 15px;
            margin-bottom: 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            animation: fadeIn 0.5s ease;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            transition: transform 0.2s;
        }

        .expense-item:hover {
            transform: scale(1.02);
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .expense-info {
            flex-grow: 1;
        }

        .expense-category {
            font-weight: 600;
            color: #4a90e2;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .expense-description {
            color: #888;
            font-size: 14px;
        }

        .expense-amount {
            font-size: 1.2em;
            font-weight: 700;
            color: #e74c3c;
        }

        .delete-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 12px;
            margin-left: 15px;
            transition: background 0.2s;
        }

        .delete-btn:hover {
            background: #c0392b;
        }

        .category-emoji {
            font-size: 1.2em;
        }

        /* Stats Section */
        .stats-section {
            padding: 30px;
        }

        .stats-tabs {
            display: flex;
            background: #f0f4f7;
            border-radius: 12px;
            padding: 5px;
            margin-bottom: 25px;
        }

        .tab-btn {
            flex: 1;
            padding: 12px;
            background: none;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
            color: #666;
            font-size: 15px;
        }

        .tab-btn.active {
            background: linear-gradient(45deg, #4a90e2, #764ba2);
            color: white;
            box-shadow: 0 4px 15px rgba(74, 144, 226, 0.3);
        }

        .tab-btn:hover:not(.active) {
            background: #e0e6ec;
        }
        
        .chart-container {
            height: 300px;
            background: #f9f9f9;
            border-radius: 15px;
            padding: 20px;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.05);
        }

        .category-stats {
            margin-top: 30px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        
        .category-item {
            background: #f5f5f5;
            padding: 15px;
            border-radius: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.95em;
        }

        .category-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .category-amount {
            font-weight: 700;
            color: #333;
        }
        
        /* New summary styles */
        .period-summary {
            display: flex;
            flex-direction: column;
            padding: 25px;
            border-radius: 20px;
            background: linear-gradient(135deg, #4a90e2 0%, #764ba2 100%);
            color: white;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .period-summary:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
        }

        .summary-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            font-size: 1.1em;
        }

        .period-date {
            font-size: 0.9em;
            opacity: 0.8;
        }

        .summary-main {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 15px;
            margin-bottom: 20px;
        }

        .summary-total {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .summary-main .icon {
            font-size: 2.5em;
        }

        .amount-group {
            display: flex;
            flex-direction: column;
        }

        .amount-group .label {
            font-size: 0.9em;
            opacity: 0.9;
        }

        .amount-group .value {
            font-size: 2.5em;
            font-weight: 700;
            line-height: 1.2;
        }

        .summary-details {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.3);
            padding-top: 20px;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .detail-item .icon {
            font-size: 1.5em;
            margin-bottom: 5px;
        }

        .detail-label {
            font-size: 0.8em;
            opacity: 0.9;
            margin-bottom: 3px;
        }

        .detail-value {
            font-size: 1.2em;
            font-weight: 700;
        }


        /* Budget Section */
        .budget-section .budget-btn {
            background: linear-gradient(135deg, #34d399 0%, #20c997 100%);
        }

        .budget-section .budget-btn:hover {
            box-shadow: 0 8px 20px rgba(52, 211, 153, 0.3);
        }

        .budget-status {
            background: #f0f7ff;
            border-left: 5px solid #4a90e2;
            padding: 25px;
            border-radius: 15px;
        }

        .budget-status.over-budget {
            background: #fff0f0;
            border-left-color: #e74c3c;
        }

        .budget-progress {
            background: #e9ecef;
            height: 12px;
            border-radius: 6px;
            margin: 15px 0;
        }

        .budget-progress-bar {
            background: #4a90e2;
            border-radius: 6px;
        }

        .budget-progress-bar.over-budget {
            background: #e74c3c;
        }
        
        .budget-info-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 10px;
        }
        
        .budget-info-item {
            padding: 12px;
            background: #fafafa;
            border-radius: 10px;
        }
        
        .positive { color: #2ecc71; }
        .negative { color: #e74c3c; }

        /* Data Section */
        .data-section {
            padding: 30px;
        }
        
        .data-buttons {
            gap: 10px;
            grid-template-columns: repeat(2, 1fr);
        }
        
        .data-btn {
            font-size: 14px;
            padding: 10px;
            border-radius: 10px;
        }

        .data-btn.danger {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
        }

        .data-btn.success {
            background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%);
        }
        
        .data-btn.info {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
        }
        
        .save-status {
            margin-top: 15px;
            padding: 12px;
            border-radius: 10px;
            font-size: 14px;
            text-align: center;
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .save-status.error {
            background: #f8d7da;
            color: #721c24;
            border-color: #f5c6cb;
        }

        .stats-content {
            display: none;
        }

        .stats-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>나의 지출 분석</h1>
        
        <div class="card input-section">
            <h3>지출 기록하기</h3>
            <div class="form-group">
                <label for="amount">금액</label>
                <input type="number" id="amount" placeholder="예: 10000">
            </div>
            
            <div class="form-group">
                <label for="category">카테고리</label>
                <select id="category">
                    <option value="식비">🍔 식비</option>
                    <option value="교통">🚌 교통</option>
                    <option value="학업">📚 학업</option>
                    <option value="쇼핑">🛍️ 쇼핑</option>
                    <option value="동아리">🎪 동아리</option>
                    <option value="카페">☕ 카페</option>
                    <option value="미용">💄 미용</option>
                    <option value="의료">🏥 의료</option>
                    <option value="운동">💪 운동</option>
                    <option value="투자">📈 투자</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="description">내용</label>
                <input type="text" id="description" placeholder="예: 점심 식사">
            </div>
            
            <button class="btn" onclick="addExpense()">지출 추가하기</button>
        </div>

        <div class="total-section">
            <h3>이번 달 총 지출</h3>
            <div class="total-amount" id="totalAmount">0원</div>
        </div>

        <div class="card budget-section">
            <h3>💰 월 예산 설정</h3>
            <div class="budget-input-group">
                <input type="number" id="budgetInput" class="budget-input" placeholder="월 예산 입력 (예: 500000)">
                <button class="budget-btn" onclick="setBudget()">설정</button>
            </div>
        </div>

        <div class="card data-section">
            <h3>💾 데이터 관리</h3>
            <div id="saveStatus" class="save-status" style="display: none;"></div>
            <div class="data-buttons">
                <button class="data-btn info" onclick="exportData()">📤 내보내기</button>
                <button class="data-btn info" onclick="document.getElementById('fileInput').click()">📥 가져오기</button>
                <button class="data-btn danger" onclick="clearAllData()">🗑️ 모두 삭제</button>
                <button class="data-btn success" onclick="saveToStorage()">💾 수동 저장</button>
            </div>
            <input type="file" id="fileInput" class="file-input" accept=".json" onchange="importData(event)">
        </div>

        <div id="budgetStatus" class="card budget-status" style="display: none;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                <h4 id="budgetTitle" style="margin: 0; font-size: 1.1em; color: #444;">예산 현황</h4>
                <button class="budget-btn" id="budgetEditBtn" style="font-size: 12px; padding: 8px 12px; background: #6c757d;">예산 수정</button>
            </div>
            
            <div id="budgetEditForm" class="budget-input-group" style="display: none; margin-bottom: 15px;">
                <input type="number" id="budgetEditInput" class="budget-input" placeholder="새 예산 입력">
                <button class="budget-btn" id="updateBudgetBtn">수정</button>
                <button class="budget-btn" id="cancelBudgetBtn" style="background: #e74c3c;">취소</button>
            </div>
            
            <div class="budget-progress">
                <div class="budget-progress-bar" id="budgetProgressBar"></div>
            </div>
            
            <div class="budget-info-grid">
                <div class="budget-info-item">
                    <div class="budget-info-value" id="budgetUsage">0%</div>
                    <div class="budget-info-label">사용률</div>
                </div>
                <div class="budget-info-item">
                    <div class="budget-info-value" id="budgetRemaining">0원</div>
                    <div class="budget-info-label">남은 예산</div>
                </div>
                <div class="budget-info-item">
                    <div class="budget-info-value" id="dailyRecommend">0원</div>
                    <div class="budget-info-label">일일 권장</div>
                </div>
                <div class="budget-info-item">
                    <div class="budget-info-value" id="monthlyBudget">0원</div>
                    <div class="budget-info-label">설정 예산</div>
                </div>
            </div>
        </div>

        <div class="card expense-list">
            <h3>📝 지출 내역</h3>
            <div class="sort-section" style="text-align: right; margin-bottom: 15px;">
                <label for="sortOrder" style="font-size: 0.9em; color: #777;">정렬 기준:</label>
                <select id="sortOrder" onchange="sortExpenses()">
                    <option value="dateDesc">날짜 (최신순)</option>
                    <option value="amountDesc">금액 (높은 순)</option>
                    <option value="categoryAsc">카테고리 (가나다순)</option>
                </select>
            </div>
            <div id="expenseItems"></div>
        </div>

        <div class="card stats-section">
            <h3>📊 지출 통계</h3>
            
            <div class="stats-tabs">
                <button class="tab-btn active" onclick="switchTab('weekly')">주간 통계</button>
                <button class="tab-btn" onclick="switchTab('monthly')">월간 통계</button>
            </div>

            <div id="weekly-stats" class="stats-content active">
                <div class="period-summary">
                    <div class="summary-header">
                        <h4 style="margin: 0;">이번 주 지출 현황</h4>
                        <span class="period-date" id="weeklyPeriod"></span>
                    </div>
                    <div class="summary-main">
                        <div class="summary-total">
                            <span class="icon">💸</span>
                            <div class="amount-group">
                                <div class="label">총 지출</div>
                                <div class="value" id="weeklyTotal">0원</div>
                            </div>
                        </div>
                    </div>
                    <div class="summary-details">
                        <div class="detail-item">
                            <span class="icon">☀️</span>
                            <div class="detail-label">일평균</div>
                            <div class="detail-value" id="weeklyAvg">0원</div>
                        </div>
                        <div class="detail-item">
                            <span class="icon">📄</span>
                            <div class="detail-label">지출 건수</div>
                            <div class="detail-value" id="weeklyCount">0건</div>
                        </div>
                    </div>
                </div>
                
                <div class="chart-container">
                    <canvas id="weeklyChart"></canvas>
                </div>
                
                <div class="category-stats" id="weeklyCategoryStats"></div>
            </div>

            <div id="monthly-stats" class="stats-content">
                <div class="period-summary">
                    <div class="summary-header">
                        <h4 style="margin: 0;">이번 달 지출 현황</h4>
                        <span class="period-date" id="monthlyPeriod"></span>
                    </div>
                    <div class="summary-main">
                        <div class="summary-total">
                            <span class="icon">💸</span>
                            <div class="amount-group">
                                <div class="label">총 지출</div>
                                <div class="value" id="monthlyTotal">0원</div>
                            </div>
                        </div>
                    </div>
                    <div class="summary-details">
                        <div class="detail-item">
                            <span class="icon">☀️</span>
                            <div class="detail-label">일평균</div>
                            <div class="detail-value" id="monthlyAvg">0원</div>
                        </div>
                        <div class="detail-item">
                            <span class="icon">📄</span>
                            <div class="detail-label">지출 건수</div>
                            <div class="detail-value" id="monthlyCount">0건</div>
                        </div>
                    </div>
                </div>
                
                <div class="chart-container">
                    <canvas id="monthlyChart"></canvas>
                </div>
                
                <div class="category-stats" id="monthlyCategoryStats"></div>
            </div>
        </div>
    </div>

    <script>
        // 지출 데이터를 저장할 배열
        let expenses = [];
        let weeklyChart = null;
        let monthlyChart = null;
        let monthlyBudget = 0; // 월 예산

        // 카테고리별 이모지 매핑
        const categoryEmojis = {
            '식비': '🍔',
            '교통': '🚌',
            '학업': '📚',
            '쇼핑': '🛍️',
            '동아리': '🎪',
            '카페': '☕',
            '미용': '💄',
            '의료': '🏥',
            '운동': '💪',
            '투자': '📈'
        };

        // 카테고리별 색상 매핑
        const categoryColors = {
            '식비': '#FF6384',
            '교통': '#36A2EB',
            '학업': '#FFCE56',
            '쇼핑': '#9966FF',
            '동아리': '#4BC0C0',
            '카페': '#FF6384',
            '미용': '#C9CBCF',
            '의료': '#FF6384',
            '운동': '#4BC0C0',
            '투자': '#00D2FF'
        };

        // 지출 추가 함수
        function addExpense() {
            const amount = document.getElementById('amount').value;
            const category = document.getElementById('category').value;
            const description = document.getElementById('description').value;

            // 입력값 확인
            if (!amount || amount <= 0) {
                alert('올바른 금액을 입력해주세요!');
                return;
            }

            if (!description.trim()) {
                alert('지출 내용을 입력해주세요!');
                return;
            }

            // 새로운 지출 객체 생성
            const newExpense = {
                id: Date.now(), // 간단한 ID 생성
                amount: parseInt(amount),
                category: category,
                description: description.trim(),
                date: new Date().toLocaleDateString(),
                dateObj: new Date() // 날짜 계산용
            };

            // 배열에 추가
            expenses.push(newExpense);

            // 화면 업데이트
            sortExpenses();
            updateTotal();
            updateStats();
            updateBudgetStatus();
            saveToStorage(); // 자동 저장

            // 입력 필드 초기화
            document.getElementById('amount').value = '';
            document.getElementById('description').value = '';
        }

        // 지출 내역 화면에 표시
        function displayExpenses() {
            const container = document.getElementById('expenseItems');
            container.innerHTML = '';

            expenses.forEach(expense => {
                const expenseDiv = document.createElement('div');
                expenseDiv.className = 'expense-item';
                
                expenseDiv.innerHTML = `
                    <div class="expense-info">
                        <div class="expense-category">
                            <span class="category-emoji">${categoryEmojis[expense.category]}</span>
                            ${expense.category}
                        </div>
                        <div class="expense-description">${expense.description} | ${expense.date}</div>
                    </div>
                    <div style="display: flex; align-items: center;">
                        <div class="expense-amount">${expense.amount.toLocaleString()}원</div>
                        <button class="delete-btn" onclick="deleteExpense(${expense.id})">삭제</button>
                    </div>
                `;
                
                container.appendChild(expenseDiv);
            });
        }

        // 지출 삭제
        function deleteExpense(id) {
            expenses = expenses.filter(expense => expense.id !== id);
            sortExpenses();
            updateTotal();
            updateStats();
            updateBudgetStatus();
            saveToStorage(); // 자동 저장
        }

        // 지출 내역 정렬 함수
        function sortExpenses() {
            const sortOrder = document.getElementById('sortOrder').value;

            switch (sortOrder) {
                case 'dateDesc':
                    expenses.sort((a, b) => b.dateObj - a.dateObj);
                    break;
                case 'amountDesc':
                    expenses.sort((a, b) => b.amount - a.amount);
                    break;
                case 'categoryAsc':
                    expenses.sort((a, b) => a.category.localeCompare(b.category));
                    break;
                default:
                    break;
            }
            displayExpenses();
        }

        // 총액 업데이트
        function updateTotal() {
            const total = expenses.reduce((sum, expense) => sum + expense.amount, 0);
            document.getElementById('totalAmount').textContent = total.toLocaleString() + '원';
        }

        // Enter 키로 추가 가능하게
        document.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addExpense();
            }
        });

        // 탭 전환 함수
        function switchTab(tab) {
            // 모든 탭 버튼에서 active 클래스 제거
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            // 모든 탭 컨텐츠 숨기기
            document.querySelectorAll('.stats-content').forEach(content => content.classList.remove('active'));
            
            // 선택된 탭 활성화
            document.querySelector(`.tab-btn[onclick="switchTab('${tab}')"]`).classList.add('active');
            document.getElementById(tab + '-stats').classList.add('active');
            
            // 차트 업데이트
            updateStats();
        }

        // 주간/월간 데이터 필터링
        function getWeeklyExpenses() {
            const now = new Date();
            const weekStart = new Date(now);
            weekStart.setDate(now.getDate() - now.getDay());
            weekStart.setHours(0, 0, 0, 0);
            
            return expenses.filter(expense => expense.dateObj >= weekStart);
        }

        function getMonthlyExpenses() {
            const now = new Date();
            const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);
            
            return expenses.filter(expense => expense.dateObj >= monthStart);
        }

        // 카테고리별 통계 계산
        function getCategoryStats(expenseList) {
            const categoryStats = {};
            
            expenseList.forEach(expense => {
                if (!categoryStats[expense.category]) {
                    categoryStats[expense.category] = {
                        total: 0,
                        count: 0
                    };
                }
                categoryStats[expense.category].total += expense.amount;
                categoryStats[expense.category].count += 1;
            });
            
            return categoryStats;
        }

        // 통계 업데이트
        function updateStats() {
            updateWeeklyStats();
            updateMonthlyStats();
        }

        function updateWeeklyStats() {
            const weeklyExpenses = getWeeklyExpenses();
            const total = weeklyExpenses.reduce((sum, expense) => sum + expense.amount, 0);
            const count = weeklyExpenses.length;
            const avg = count > 0 ? Math.round(total / 7) : 0;
            
            const now = new Date();
            const weekStart = new Date(now);
            weekStart.setDate(now.getDate() - now.getDay());
            const weekEnd = new Date(now);
            weekEnd.setDate(now.getDate() + (6 - now.getDay()));
            
            const periodSpan = document.getElementById('weeklyPeriod');
            periodSpan.textContent = `${weekStart.toLocaleDateString()} - ${weekEnd.toLocaleDateString()}`;

            document.getElementById('weeklyTotal').textContent = total.toLocaleString() + '원';
            document.getElementById('weeklyAvg').textContent = avg.toLocaleString() + '원';
            document.getElementById('weeklyCount').textContent = count + '건';
            
            const categoryStats = getCategoryStats(weeklyExpenses);
            displayCategoryStats('weeklyCategoryStats', categoryStats);
            
            updateChart('weeklyChart', categoryStats, 'weekly');
        }

        function updateMonthlyStats() {
            const monthlyExpenses = getMonthlyExpenses();
            const total = monthlyExpenses.reduce((sum, expense) => sum + expense.amount, 0);
            const count = monthlyExpenses.length;
            const now = new Date();
            const daysInMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();
            const avg = count > 0 ? Math.round(total / daysInMonth) : 0;

            const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);
            const monthEnd = new Date(now.getFullYear(), now.getMonth() + 1, 0);
            const monthFormatter = new Intl.DateTimeFormat('ko-KR', { month: 'long' });
            const periodSpan = document.getElementById('monthlyPeriod');
            periodSpan.textContent = `${monthFormatter.format(monthStart)} (${monthStart.getDate()}일 - ${monthEnd.getDate()}일)`;
            
            document.getElementById('monthlyTotal').textContent = total.toLocaleString() + '원';
            document.getElementById('monthlyAvg').textContent = avg.toLocaleString() + '원';
            document.getElementById('monthlyCount').textContent = count + '건';
            
            const categoryStats = getCategoryStats(monthlyExpenses);
            displayCategoryStats('monthlyCategoryStats', categoryStats);
            
            updateChart('monthlyChart', categoryStats, 'monthly');
        }

        // 카테고리별 통계 표시
        function displayCategoryStats(containerId, categoryStats) {
            const container = document.getElementById(containerId);
            container.innerHTML = '';
            
            const sortedCategories = Object.entries(categoryStats)
                .sort(([,a], [,b]) => b.total - a.total);
            
            sortedCategories.forEach(([category, stats]) => {
                const categoryDiv = document.createElement('div');
                categoryDiv.className = 'category-item';
                
                categoryDiv.innerHTML = `
                    <div class="category-info">
                        <span class="category-emoji">${categoryEmojis[category]}</span>
                        <div>
                            <div style="font-weight: 600; color: #333;">${category}</div>
                            <div style="font-size: 12px; color: #666;">${stats.count}건</div>
                        </div>
                    </div>
                    <div class="category-amount">${stats.total.toLocaleString()}원</div>
                `;
                
                container.appendChild(categoryDiv);
            });
        }

        // 차트 업데이트
        function updateChart(chartId, categoryStats, period) {
            const ctx = document.getElementById(chartId).getContext('2d');
            
            if (period === 'weekly' && weeklyChart) {
                weeklyChart.destroy();
            } else if (period === 'monthly' && monthlyChart) {
                monthlyChart.destroy();
            }
            
            const categories = Object.keys(categoryStats);
            const amounts = Object.values(categoryStats).map(stat => stat.total);
            const colors = categories.map(category => categoryColors[category] || '#999999');
            
            if (categories.length === 0) {
                return;
            }
            
            const chartConfig = {
                type: 'doughnut',
                data: {
                    labels: categories,
                    datasets: [{
                        data: amounts,
                        backgroundColor: colors,
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                padding: 20,
                                usePointStyle: true
                            }
                        }
                    }
                }
            };
            
            const chart = new Chart(ctx, chartConfig);
            
            if (period === 'weekly') {
                weeklyChart = chart;
            } else {
                monthlyChart = chart;
            }
        }

        // 페이지 로드 시 통계 초기화
        document.addEventListener('DOMContentLoaded', function() {
            loadFromStorage();
            sortExpenses();
            updateStats();
            
            document.getElementById('budgetEditBtn').addEventListener('click', showBudgetEdit);
            document.getElementById('updateBudgetBtn').addEventListener('click', updateBudget);
            document.getElementById('cancelBudgetBtn').addEventListener('click', cancelBudgetEdit);
            
            document.getElementById('budgetEditInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    updateBudget();
                }
            });
        });

        // === 데이터 저장/로드 기능 ===
        
        function saveToStorage() {
            const data = {
                expenses: expenses,
                monthlyBudget: monthlyBudget,
                lastSaved: new Date().toISOString()
            };
            
            try {
                const jsonData = JSON.stringify(data);
                localStorage.setItem('expenseTrackerData', jsonData);
                showSaveStatus('데이터가 자동 저장되었습니다.', 'success');
            } catch (error) {
                showSaveStatus('저장 중 오류가 발생했습니다.', 'error');
                console.error('저장 오류:', error);
            }
        }

        function loadFromStorage() {
            try {
                const savedData = localStorage.getItem('expenseTrackerData');
                if (savedData) {
                    const data = JSON.parse(savedData);
                    
                    expenses = data.expenses.map(expense => ({
                        ...expense,
                        dateObj: new Date(expense.dateObj || expense.date)
                    }));
                    
                    monthlyBudget = data.monthlyBudget || 0;
                    
                    displayExpenses();
                    updateTotal();
                    
                    if (monthlyBudget > 0) {
                        document.getElementById('budgetStatus').style.display = 'block';
                        updateBudgetStatus();
                    }
                    
                    if (expenses.length > 0) {
                        showSaveStatus(`저장된 데이터를 불러왔습니다. (지출 ${expenses.length}건)`, 'success');
                    }
                }
            } catch (error) {
                showSaveStatus('데이터 로드 중 오류가 발생했습니다.', 'error');
                console.error('로드 오류:', error);
            }
        }

        function exportData() {
            const data = {
                expenses: expenses,
                monthlyBudget: monthlyBudget,
                exportDate: new Date().toISOString(),
                version: '1.0'
            };
            
            const jsonData = JSON.stringify(data, null, 2);
            const blob = new Blob([jsonData], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `지출분석_백업_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            showSaveStatus('데이터가 파일로 내보내졌습니다.', 'success');
        }

        function importData(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = JSON.parse(e.target.result);
                    
                    if (!data.expenses || !Array.isArray(data.expenses)) {
                        throw new Error('올바르지 않은 파일 형식입니다.');
                    }
                    
                    const confirmImport = confirm('기존 데이터를 모두 삭제하고 새 데이터로 교체하시겠습니까?');
                    if (!confirmImport) return;
                    
                    expenses = data.expenses.map(expense => ({
                        ...expense,
                        dateObj: new Date(expense.dateObj || expense.date)
                    }));
                    
                    monthlyBudget = data.monthlyBudget || 0;
                    
                    sortExpenses();
                    updateTotal();
                    updateStats();
                    
                    if (monthlyBudget > 0) {
                        document.getElementById('budgetStatus').style.display = 'block';
                        updateBudgetStatus();
                    }
                    
                    saveToStorage();
                    showSaveStatus(`데이터를 성공적으로 가져왔습니다. (지출 ${expenses.length}건)`, 'success');
                    
                } catch (error) {
                    showSaveStatus('파일을 읽는 중 오류가 발생했습니다.', 'error');
                    console.error('가져오기 오류:', error);
                }
            };
            reader.readAsText(file);
            
            event.target.value = '';
        }

        function clearAllData() {
            const confirmDelete = confirm('정말로 모든 데이터를 삭제하시겠습니까?\n이 작업은 되돌릴 수 없습니다.');
            if (!confirmDelete) return;
            
            const confirmAgain = confirm('마지막 확인: 모든 지출 기록과 예산 설정이 삭제됩니다.');
            if (!confirmAgain) return;
            
            expenses = [];
            monthlyBudget = 0;
            
            localStorage.removeItem('expenseTrackerData');
            
            displayExpenses();
            updateTotal();
            updateStats();
            document.getElementById('budgetStatus').style.display = 'none';
            
            showSaveStatus('모든 데이터가 삭제되었습니다.', 'success');
        }

        function showSaveStatus(message, type = 'success') {
            const statusDiv = document.getElementById('saveStatus');
            statusDiv.textContent = message;
            statusDiv.className = `save-status ${type}`;
            
            statusDiv.style.display = 'block';
            
            setTimeout(() => {
                statusDiv.style.display = 'none';
            }, 3000);
        }

        function setBudget() {
            const budgetInput = document.getElementById('budgetInput');
            const budget = parseInt(budgetInput.value);

            if (!budget || budget <= 0) {
                alert('올바른 예산 금액을 입력해주세요!');
                return;
            }

            monthlyBudget = budget;
            budgetInput.value = '';
            
            document.getElementById('budgetStatus').style.display = 'block';
            updateBudgetStatus();
            saveToStorage();
        }

        function updateBudgetStatus() {
            if (monthlyBudget === 0) return;

            const monthlyExpenses = getMonthlyExpenses();
            const totalSpent = monthlyExpenses.reduce((sum, expense) => sum + expense.amount, 0);
            
            const usagePercent = Math.round((totalSpent / monthlyBudget) * 100);
            const remaining = monthlyBudget - totalSpent;
            
            const now = new Date();
            const lastDay = new Date(now.getFullYear(), now.getMonth() + 1, 0).getDate();
            const remainingDays = lastDay - now.getDate() + 1;
            
            const dailyRecommend = remaining > 0 && remainingDays > 0 ? Math.round(remaining / remainingDays) : 0;
            
            const budgetStatus = document.getElementById('budgetStatus');
            const progressBar = document.getElementById('budgetProgressBar');
            const budgetTitle = document.getElementById('budgetTitle');
            
            if (usagePercent > 100) {
                budgetStatus.classList.add('over-budget');
                progressBar.classList.add('over-budget');
                budgetTitle.textContent = `예산 ${usagePercent - 100}% 초과! 😱`;
            } else {
                budgetStatus.classList.remove('over-budget');
                progressBar.classList.remove('over-budget');
                budgetTitle.textContent = '예산 현황 📊';
            }
            
            const progressWidth = Math.min(usagePercent, 100);
            progressBar.style.width = progressWidth + '%';
            
            document.getElementById('budgetUsage').textContent = usagePercent + '%';
            document.getElementById('budgetUsage').className = 'budget-info-value ' + (usagePercent > 100 ? 'negative' : 'positive');
            
            document.getElementById('budgetRemaining').textContent = remaining.toLocaleString() + '원';
            document.getElementById('budgetRemaining').className = 'budget-info-value ' + (remaining < 0 ? 'negative' : 'positive');
            
            document.getElementById('dailyRecommend').textContent = dailyRecommend.toLocaleString() + '원';
            document.getElementById('dailyRecommend').className = 'budget-info-value ' + (dailyRecommend < 0 ? 'negative' : 'positive');
            
            document.getElementById('monthlyBudget').textContent = monthlyBudget.toLocaleString() + '원';
        }

        function showBudgetEdit() {
            const editForm = document.getElementById('budgetEditForm');
            const editInput = document.getElementById('budgetEditInput');
            
            editForm.style.display = 'flex';
            editInput.value = monthlyBudget;
            editInput.focus();
        }

        function cancelBudgetEdit() {
            const editForm = document.getElementById('budgetEditForm');
            const editInput = document.getElementById('budgetEditInput');
            
            editForm.style.display = 'none';
            editInput.value = '';
        }

        function updateBudget() {
            const editInput = document.getElementById('budgetEditInput');
            const newBudget = parseInt(editInput.value);

            if (!newBudget || newBudget <= 0) {
                alert('올바른 예산 금액을 입력해주세요!');
                return;
            }

            monthlyBudget = newBudget;
            
            cancelBudgetEdit();
            
            updateBudgetStatus();
            saveToStorage();
            
            alert('예산이 성공적으로 수정되었습니다!');
        }
    </script>
</body>
</html>
